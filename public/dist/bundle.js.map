{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC;AACA,YAAY,2CAA2C;AACvD;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;;;;;;;UCZA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oCAAoC,mBAAO,CAAC,uFAAuC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,uBAAuB;AACvG;AACA","sources":["webpack://investment-simulator/./src/utils/calculateCompoundInterest.ts","webpack://investment-simulator/webpack/bootstrap","webpack://investment-simulator/./index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateCompoundInterest = calculateCompoundInterest;\nfunction calculateCompoundInterest(options) {\n    const { principal, rate, time, contributions = 0 } = options;\n    let futureValue = principal * Math.pow((1 + rate), time);\n    if (contributions > 0) {\n        for (let i = 1; i <= time; i++) {\n            futureValue += contributions * Math.pow((1 + rate), time - i);\n        }\n    }\n    return futureValue;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst calculateCompoundInterest_1 = require(\"./src/utils/calculateCompoundInterest\");\nwindow.calculateInvestment = () => {\n    const principal = parseFloat(document.getElementById(\"principal\").value);\n    const rate = parseFloat(document.getElementById(\"rate\").value) / 100;\n    const time = parseInt(document.getElementById(\"time\").value);\n    const contributions = parseFloat(document.getElementById(\"contributions\").value);\n    const options = {\n        principal,\n        rate,\n        time,\n        contributions\n    };\n    const futureValue = (0, calculateCompoundInterest_1.calculateCompoundInterest)(options);\n    const resultDiv = document.getElementById(\"result\");\n    if (resultDiv) {\n        resultDiv.innerHTML = `ðŸ’° O valor futuro do investimento Ã©: <strong>R$${futureValue.toFixed(2)}</strong>`;\n    }\n};\n"],"names":[],"sourceRoot":""}